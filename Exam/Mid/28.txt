*****Question 1 (a)

Explain the distinctions among primary key, candidate key, and superkey with an example. For R = (A, B, C, D) where AC and BCD are minimal, find all keys.

Definitions with Examples
Superkey: A set of attributes that uniquely identifies a tuple (may contain extra attributes).

Example: In a Student table, {Roll_No, Name, Email} is a superkey (but redundant).

Candidate Key: Minimal superkey (no subset is a superkey).

Example: {Roll_No} or {Email} (either can uniquely identify a student).

Primary Key: The chosen candidate key for DB design.

Example: {Roll_No} (selected for indexing).

Solution for R = (A, B, C, D)
Given:

Minimal keys: AC and BCD.

Closure of AC: AC → All attributes (since AC is minimal).

Closure of BCD: BCD → All attributes.

Other possible keys:

Find all combinations where closure includes all attributes:

AD → Not a key (unless AD → B, C, which is not given).

AB → Not a key (unless AB → C, D).

Only AC and BCD are minimal.

Answer:

Number of keys: 2 (AC, BCD).





*****Question 1 (b)

SQL Queries for the given relational schema:

***** (i) Update employee ‘12345’ to work in “Newtown”:
sql
UPDATE works
SET branch_name = (
    SELECT branch_name 
    FROM company 
    WHERE city = 'Newtown'
)
WHERE ID = '12345';


***** (ii) Give managers of “First Bank Corporation” a 10% raise (or 3% if salary > 100,000):
sql
UPDATE works
SET salary = 
    CASE 
        WHEN salary * 1.1 <= 100000 THEN salary * 1.1
        ELSE salary * 1.03
    END
WHERE ID IN (
    SELECT manager_id 
    FROM manages
    WHERE branch_name = 'First Bank Corporation'
);
***** (iii) E-R Diagram:


Entities: employee, company, branch.

Relationships:

works (N:1 between employee and branch).

manages (1:1 between employee and manager).

Attributes: Primary keys underlined.



*****Question 1 (c)


Convert lateral query to WITH clause and scalar subquery:

Using WITH Clause:
sql
WITH dept_avg AS (
    SELECT dept_name, AVG(salary) AS avg_salary
    FROM instructor
    GROUP BY dept_name
)
SELECT I.name, I.salary, D.avg_salary
FROM instructor I
JOIN dept_avg D ON I.dept_name = D.dept_name;
Using Scalar Subquery:
sql
SELECT name, salary, 
       (SELECT AVG(salary) 
        FROM instructor I2 
        WHERE I2.dept_name = I1.dept_name) AS avg_salary
FROM instructor I1;


*****   Question 1 (d)


Reasons for NULL values:

Missing data (e.g., optional fields like middle_name).

Unknown values (e.g., end_date for ongoing projects).

Inapplicable attributes (e.g., spouse_name for unmarried employees).

*****   Question 1 (e)


Find students who never took a course (using OUTER JOIN):

sql
SELECT S.ID
FROM student S
LEFT JOIN takes T ON S.ID = T.ID
WHERE T.ID IS NULL;


***** Question 2 (a)



Weak vs. Strong Entity Sets:

Strong Entity: Exists independently (e.g., Employee).

Weak Entity: Depends on a strong entity for identity (e.g., Dependent of an employee).

Relationship: Weak entities have a discriminator (partial key) and depend on a strong entity’s primary key.



*****  Question 2 (b)


E-R to Schema Conversion:
(Assuming the E-R diagram includes entities like Employee, Dependent with a identifying relationship.)

Strong Entity (Employee):

sql
employee (ID, person_name, street, city)
Weak Entity (Dependent):

sql
dependent (ID, dependent_name, age, PRIMARY KEY (ID, dependent_name),
           FOREIGN KEY (ID) REFERENCES employee(ID))
